# Bibliotecas usadas:
# Randint - obtida da random = Ser√° usada para sortear a c√©lula que o navio estar√°;
# Sleep - obtida da time = Ser√° usada para obter delays quando requisitado;

from random import randint
from time import sleep 

# A seguir temos a ordem das fun√ß√µes:
# Caso queira ir direto, pesquise:
# Por exemplo: "1¬™ fun√ß√£o" ou "7¬™ fun√ß√£o" ou pelo nome de cada uma;

# 1 - configurarJogo;
# 2 - criarTabuleiro;
# 3 - ataque;
# 4 - analisarLetra;
# 5 - resultadoTiro;
# 6 - levarParaImpressao;
# 7 - impressao;
# 8 - letrasParaCabecalho;
# 9 - imprimirSeparacao;
# 10 - mostrarPontuacao;

# # # # Fun√ß√µes # # # #

#passar as variaveis globais como parametro

#----- 1¬™ fun√ß√£o -----#

# Anderson lima
'''' SUGESTAO : remover as variaveis globais, ao inves disso passar a necessidade de criar os tabuleiros ocultos e nao ocultos para a fun√ßao
criar tabuleiro, que vai ficar dependente do nome dos jogadores e da ordem ja definida'''
# Configura√ß√£o inicial do jogo




def configurarJogo():
    # Definir as vari√°veis importantes como globais
    global ordem, nomeJogador1, nomeJogador2, quantidadeDeNavios, tabuleiroJogador1, tabOculto1, pontuacaoDoJogador1,tabuleiroJogador2, pontuacaoDoJogador2, tabOculto2

    ordem = 8
    pontuacaoDoJogador1 = pontuacaoDoJogador2 = 0

    # O programa ser√° iniciado e mostrado na tela a partir deste ponto // apenas a primeira impressao
    
    print('-'*38)
    print('üö¢ Bem-vindo ao jogo BATALHA NAVAL üö¢')
    print('-'*38)
    sleep(1)
    global arq
    arq = open('jogadas2','w')
    
    # Pede-se o nome de cada jogador

    
    while True:
        nomeJogador1 = str(input('üîò NOME DO PRIMEIRO JOGADOR: ')).upper().strip()
        sleep(0.5)
        nomeJogador2 = str(input('üîò NOME DO SEGUNDO JOGADOR: ')).upper().strip()
        sleep(0.5)
        nome_jogadores = "NOME DO JOGADOR 1 :" + nomeJogador1+"|" + '\n' + "|" + "NOME DO JOGADOR 2 :" + nomeJogador2 + '\n'
        arq.write(nome_jogadores)
        print('\nArquivo gerado com sucesso.')
        

    # Escolher a quantidade de navios que cada jogador possuir√°, enquanto a fun√ßao √© executada
        while True:
            quantidadeDeNavios = int(input('üö¢ N√∫mero de navios de cada jogador üö¢ [m√°ximo = 6]: '))
            if quantidadeDeNavios <= 6 and quantidadeDeNavios >= 1:
                break
        sleep(0.5)

    # Tabuleiros ocultos
        tabOculto1 = [['-']* ordem for i in range(ordem)]
        tabOculto2 = [['-']* ordem for i in range(ordem)]
    

    # Tabuleiros que mostram as frota, vamos chamar a fun√ß√£o criarTabuleiro, apos receber o numero de navios como parametro
    
        tabuleiroJogador1 = criarTabuleiro(quantidadeDeNavios)
        tabuleiroJogador2 = criarTabuleiro(quantidadeDeNavios) 
        tab = tabuleiroJogador1
        tab2 = tabuleiroJogador2
        string1 = str(tab).replace("[]","|") + '\n'
        string2 = str(tab2).replace("[]","|") + '\n'
        arq.write(string1)
        arq.write(string2)
         

    # Vamos definir se os usu√°rios querem que mostre a frota de navio no tabuleiro ou n√£o durante o jogo
    # Anderson lima : transformar (mostratabuleiro em uma fun√ßao dependente da 2 fun√ß√£o)
        global mostrarTabuleiro
        while True:
            mostrarTabuleiro = int(input('Mostrar FROTA no tabuleiro?\n[Selencione "1" para N√ÉO MOSTRAR a FROTA]\n[Selencione "2" para MOSTRAR a FROTA]\n'))
        
        # N√ÉO MOSTRAR AS FROTAS DE NAVIOS DE CADA JOGADOR, DURANTE A PARTIDA
            if mostrarTabuleiro == 1:
                levarParaImpressao(tabuleiroJogador1, 1, None, None, None)
                sleep(1)
                levarParaImpressao(tabOculto1, 1, None, None, None)
                sleep(1)
                '''levarParaImpressao(tabuleiroJogador2, 2, None, None, None)
                sleep(1)
                levarParaImpressao(tabOculto2, 2, None, None, None)     
                sleep(1)'''
                break

        # MOSTRAR AS FROTAS DE NAVIOS DE CADA JOGADOR, DURANTE A PARTIDA
            elif mostrarTabuleiro == 2:
                levarParaImpressao(tabuleiroJogador1, 1, None, None, None)     
                sleep(1)
                # levarParaImpressao(tabuleiroJogador2, 2, None, None, None)     
                # sleep(1)
                break

            # USU√ÅRIO DIGITOU ALGUMA VALOR INV√ÅLIDO
            else:
                print('‚ö†Ô∏è Digite uma op√ß√£o v√°lida! [Op√ß√£o 1 ou Op√ß√£o 2] ‚ö†Ô∏è\n')
            
    
        break

   
    # Como temos uma fun√ß√£o para imprimir todas as matrizes em todas as possibilidades, passamos par√¢metros do tipo "None", pois n√£o ser√° usados nessa declara√ß√£o. Por√©m, n√£o podemos ocultar os 3 √∫ltimos, tendo em vista que mesmo essa fun√ß√£o recebe 5 par√¢metros formais, usados por outras fun√ß√µes;

    

#----- 2¬™ fun√ß√£o -----#

# 
# Fun√ß√£o da cria√ß√£o do tabuleiro com espa√ßos vazios e navios
def criarTabuleiro(quantidadeDeNavios):  
    tabuleiro = [['-']*ordem for i in range(ordem)]
    
    cont = 0

    # Impede que os navios encostem uns nos outros, verificando de h√° navios adjacentes
    # logo, contador s√≥ recebe mais naviis ao passar pelas condicionais
    while cont < quantidadeDeNavios:
        linha = randint(0, ordem - 1)
        coluna = randint(0, ordem - 1)

        # Verifica√ß√£o para o N na diagonal superior  esquerda
        if linha > 0 and coluna > 0 and tabuleiro[linha-1][coluna-1] == 'N':
            continue #faz o loop voltar para o in√≠cio identado.
        if linha > 0 and tabuleiro[linha-1][coluna] == 'N': #verifica√ß√£o para o N adjascente acima
            continue
        if linha > 0 and coluna < (ordem - 1) and tabuleiro[linha-1][coluna+1] == 'N': #verifica√ß√£o para o N diagonal superior direita 
            continue
        if coluna > 0 and tabuleiro[linha][coluna-1] == 'N': #verifica√ß√£o para o N adjascente ao lado esquerdo
            continue
        if tabuleiro[linha][coluna] == 'N': #verifica√ß√£o para o N na mesma coordenada 
            continue
        if coluna < (ordem - 1) and tabuleiro[linha][coluna+1] == 'N': #verifica√ß√£o para o N adjascente ao lado direito
            continue
        if linha < (ordem - 1) and coluna > 0 and tabuleiro[linha+1][coluna-1] == 'N': #verifica√ß√£o para o N diagonal inferior esquerda
            continue
        if linha < (ordem - 1) and tabuleiro[linha+1][coluna] == 'N': #verifica√ß√£o para o N adjascente abaixo
            continue
        if linha < (ordem - 1) and coluna < (ordem - 1) and tabuleiro[linha+1][coluna+1] == 'N': #verifica√ß√£o para o N diagonal inferior direita 
            continue
        tabuleiro[linha][coluna] = 'N'
        cont += 1

    return tabuleiro


#----- 3¬™ fun√ß√£o -----#

# anderson lima
# Fun√ß√£o de ataque. Aqui ser√° pedido a letra e o n√∫mero, representando, respectivamente, a linha e a coluna de ataque.
def ataque(tabuleiro, identidade):
    while True:
        sleep(0.5)
        # Escolher qual ser√° a unidade de c√©lula atacada
        bombardear = str(input('üéØ Digite a posi√ß√£o que voc√™ quer atacar. üéØ Ex: D8: ')).upper().strip()
        # Converter as escolhas para n√∫meros inteiros. Ex: A == 1; B == 2;
        letra = analisarLetra(bombardear[0])
        numero = int(bombardear[1:])
        imprimirSeparacao()
        salvar_arquivo = int(input("Deseja continuar om o jogo ? | 1 para [SIM] e 2 para [N√£o] |"))
        if salvar_arquivo == 2:
            arq.close()
            break
        else:
            return resultadoTiro(tabuleiro, identidade, letra, numero)
    


#----- 4¬™ fun√ß√£o -----#

# 
# Escolher unidade para ser atacada; O contador, cada vez que passar para a pr√≥xima letra vai contar e isso far√° com que as letras virem n√∫meros inteiros. Ex: A == 1; B == 2;
# [Essa fun√ß√£o ser√° chamada na fun√ß√£o "ataque"]
def analisarLetra(letra):
    contador = 0
    for i in 'ABCDEFGH':
        contador += 1
        if i == letra:
            return contador


#----- 5¬™ fun√ß√£o -----#

# 
# O par√¢metro "tabuleiro" √© auto explicativo, ir√° receber√° o tabuleiro
# J√° o par√¢metro "identidade" ir√° definir de qume √© o tabuleiro [1 - refere ao primeiro jogador; 2 - refere ao segundo jogador]
# Os par√¢metros "linha" e "coluna" definir√° a "linha" e a "coluna" que o jogador mirou no advers√°rio
# O √∫ltimo par√¢metro representam a consequ√™ncia: 0 (Sem consequ√™ncia); 1 (Fogo); 2 (√Ågua);

def resultadoTiro(tabuleiro, identidade, linha, coluna):
    # QUANDO O JOGADOR ACERTAR ALGUM NAVIO;
    # Ir√° imprimir os dois tabuleiros; O de quem atacou e o de quem foi atacado, este com o s√≠mbolo de 'F' onde foi atingido;
    # Ao retornar True; simboliza que o jogador acertou o navio e continuar√° jogando;
    
    if tabuleiro[linha-1][coluna-1] == 'N':
        tabuleiro[linha-1][coluna-1] = 'F'
        if identidade == 1:
            if mostrarTabuleiro == 1: # N√ÉO MOSTRAR A FROTA DE NAVIOS
                levarParaImpressao(tabOculto2, 2, linha, coluna, 1)
            else:
                levarParaImpressao(tabuleiroJogador2, 2, linha, coluna, 0)
        else:
            if mostrarTabuleiro == 2: # N√ÉO MOSTRAR A FROTA DE NAVIOS
                levarParaImpressao(tabOculto1, 1, linha, coluna, 1)
            else:
                levarParaImpressao(tabuleiroJogador2, 2, linha, coluna, 0)
        print(f'\nüí• Voc√™ ACERTOU, {nomeJogador1}, √© FOGO! üí• \n')
        print('üòÄ JOGUE NOVAMENTE! üòÄ')
        imprimirSeparacao()
        return True

    # QUANDO O JOGADOR ACERTAR ALGUMA COORDENADA ONDE TERIA UM NAVIO, POR√âM, QUE J√Å FOI ATINGIDA;
    # Ir√° imprimir os dois tabuleiros como estariam anteriormente;
    # Ao retornar False; simboliza que o jogador atirou novamente algum lugar j√° acertado; Agora a vez ir√° ser a do advers√°rio;

    elif tabuleiro[linha-1][coluna-1] == 'F':
        print('\nüòû Voc√™ acertou um lugar j√° BOMBARDEADO! üòû')
        imprimirSeparacao()
        return False

    # QUANDO ERRAR O TIRO - FOR NA √ÅGUA
    # Ir√° imprimir os dois tabuleiros; O de quem atacou e o de quem foi atacado, este com o s√≠mbolo de 'A' onde foi atingido;
    # Ao retornar False; simboliza que o jogador errou o navio; Agora a vez ir√° ser a do advers√°rio;
    
    else:
        tabuleiro[linha-1][coluna-1] = 'A'
        if identidade == 1:
            if mostrarTabuleiro == 1: # N√ÉO MOSTRAR A FROTA DE NAVIOS
                levarParaImpressao(tabOculto2, 2, linha, coluna, 2)
            else:
                levarParaImpressao(tabuleiroJogador1, 1, linha, coluna, 0)
        else:
            if mostrarTabuleiro == 1: # N√ÉO MOSTRAR A FROTA DE NAVIOS
                levarParaImpressao(tabOculto1, 1, linha, coluna, 2)
            else:
                levarParaImpressao(tabuleiroJogador2, 2, linha, coluna, 0)
        print('\nüíß Voc√™ ERROU, √© √ÅGUA! üíß')
        print('üëã VOC√ä PERDEU A VEZ! üëã')
        imprimirSeparacao()
        return False


#----- 6¬™ fun√ß√£o -----#

# 
# Essa fun√ß√£o prepara os tabuleiros com os F de fogo e A de √°gua para levar √† impress√£o
def levarParaImpressao(tabuleiroBase, identidade, linha, coluna, consequencia):
    # Identidade == 1 significa que o tabuleiro pertence ao primeiro jogador.
    if identidade == 1:
        if consequencia == 1:
            tabuleiroBase[linha-1][coluna-1] = 'F'
        elif consequencia == 2:
            tabuleiroBase[linha-1][coluna-1] = 'A'
        impressao(tabuleiroBase)

    # Identidade == 2 significa que o tabuleiro pertence ao segundo jogador.
    elif identidade == 2:
        if consequencia == 1:
            tabuleiroBase[linha-1][coluna-1] = 'F'
        elif consequencia == 2:
            tabuleiroBase[linha-1][coluna-1] = 'A'
        impressao(tabuleiroBase)


#----- 7¬™ fun√ß√£o -----#


# Essa fun√ß√£o ser√° para imprimir os tabuleiros um ao lado do outro, com cabe√ßalho e os demais enfeites;
def impressao(tabuleiroBase):
    if tabuleiroBase == tabuleiroJogador1 or tabuleiroBase == tabuleiroJogador2:
        tabuleiroImpresso1 = tabuleiroJogador1
        tabuleiroImpresso2 = tabuleiroJogador2

    elif tabuleiroBase == tabOculto1 or tabuleiroBase == tabOculto2:
        tabuleiroImpresso1 = tabOculto1
        tabuleiroImpresso2 = tabOculto2
    
    print(f'\nüî¥ Tabuleiro da(o) {nomeJogador1}', end=' '*(36-len(nomeJogador1)))
    print(f'üî¥ Tabuleiro da(o) {nomeJogador2}\n')

    print('üö¢', end=' '*4)
    for i in range(ordem):
        if i > 8:
            print(f'{i+1}', end=' '*2)
        else:
            print(f'{i+1}', end=' '*3)
        if i == ordem-1:
            print(' '*3, end='')
            print('üö¢', end=' '*5)
            for i in range(ordem):
                if i > 9:
                    print(f'{i+1}', end=' '*2)
                else:
                    print(f'{i+1}', end=' '*3)
    print()

    for i in range(ordem):
        print(f'{letrasParaCabecalho(i-1):3}', end='|  ')
        for j in range(ordem):
            print(f'{tabuleiroImpresso1[i][j]:4}', end='')
        print(f'   {letrasParaCabecalho(i-1):3}', end='|')
        for k in range(ordem):
            if k == 0:
                print(' '*3, end='')
            print(f'{tabuleiroImpresso2[i][k]:4}', end='')
        print()
    print()



print('\nArquivo gerado com sucesso.')

#----- 8¬™ fun√ß√£o -----#

# Anderson lima
# Definir letra de cada linha no cabe√ßalho [essa fun√ß√£o ser√° chamada na fun√ß√£o "impressao"]
def letrasParaCabecalho(contador):
    l = 'ABCDEFGH'
    contador += 1
    return l[contador]


#----- 9¬™ fun√ß√£o -----#

# 
# Essa fun√ß√£o serve apenas para imprimir uma separa√ß√£o entre alguns pontos espec√≠ficos, quando ela for chamada;
def imprimirSeparacao():
    print()
    print('= '*28)
    print()

#----- 10¬™ fun√ß√£o -----#

# 
# Fun√ß√£o para mostrar a pontua√ß√£o de cada jogador, quando for solicitada;
def mostrarPontuacao():
    print('üü® TABELA DA PONTUA√á√ÉO DOS JOGADORES üü®\n')
    print(f'Pontua√ß√£o do jogador {nomeJogador1}: {pontuacaoDoJogador1}')
    print(f'Pontua√ß√£o do jogador {nomeJogador2}: {pontuacaoDoJogador2}')

    pontos1 = pontuacaoDoJogador1
    pontos2 = pontuacaoDoJogador2
    
    arqpontos1 = "\n" + f"PONTUA√á√ÉO DO JOGADOR 1 : " + "\n" + str(pontos1) 
    arqpontos2 = "\n" + f"PONTUA√á√ÉO DO JOGADOR 2 : " +  "\n" + str(pontos2) 
    arq.write(arqpontos1)
    arq.write(arqpontos2)
        
    

    
    imprimirSeparacao()
        

# # # # #  Programa principal  # # # # #


while True:
    escolha = int(input('üòÄ Ol√°, o que voc√™ deseja fazer?\n[1 - Iniciar um novo jogo?] ‚úîÔ∏è\n[2 - Sair] üëã\n'))
    if escolha == 2:
        break
    sleep(1)
    print('üéâ Vamos come√ßar üéâ')
    sleep(1)
    configurarJogo()
    while True:
        
        # o programa continua ate a pontua√ßao ser igual ao n de navios
        while True:
            print(f'\nüëâ Agora √© a vez do jogador {nomeJogador1} atacar o jogador {nomeJogador2}\n')
            resultadoDoAtaque = ataque(tabuleiroJogador2, 1)
            if resultadoDoAtaque == True:
                pontuacaoDoJogador1 += 1
                mostrarPontuacao()
                if pontuacaoDoJogador1 == quantidadeDeNavios:
                    sleep(1)
                    print('Espereeem.... algu√©m ganhou...\n')
                    sleep(2)
                    print(f'\nüëè PARAB√âNS! {nomeJogador1} GANHOU! üëè\n')
                    
                    break
            else:
                mostrarPontuacao()
                break

        if pontuacaoDoJogador1 == quantidadeDeNavios:
            break

        while True:
            print(f'üëâ Agora √© a vez do jogador {nomeJogador2} atacar o jogador {nomeJogador1}\n')
            resultadoDoAtaque = ataque(tabuleiroJogador1, 2)
            if resultadoDoAtaque == True:
                pontuacaoDoJogador2 += 1
                mostrarPontuacao()
                if pontuacaoDoJogador2 == quantidadeDeNavios:
                    sleep(1)
                    print('Espereeem.... algu√©m ganhou...\n')
                    sleep(2)
                    print(f'\nüëè PARAB√âNS! {nomeJogador2} GANHOU! üëè\n')
                    break 
            else:
                mostrarPontuacao()
                break
        if pontuacaoDoJogador2 == quantidadeDeNavios:
            break
print('\nüòÄ Foi um prazer ter esse momento com voc√™. üëè Volte sempre! üëã\n')