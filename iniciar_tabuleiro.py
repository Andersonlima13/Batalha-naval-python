# Bibliotecas usadas:
# Randint - obtida da random = Ser√° usada para sortear a c√©lula que o navio estar√°;
# Sleep - obtida da time = Ser√° usada para obter delays quando requisitado;

from random import randint
from time import sleep 

# A seguir temos a ordem das fun√ß√µes:
# Caso queira ir direto, pesquise:
# Por exemplo: "1¬™ fun√ß√£o" ou "7¬™ fun√ß√£o" ou pelo nome de cada uma;

# 1 - configurarJogo;
# 2 - criarTabuleiro;
# 3 - ataque;
# 4 - analisarLetra;
# 5 - resultadoTiro;
# 6 - levarParaImpressao;
# 7 - impressao;
# 8 - letrasParaCabecalho;
# 9 - imprimirSeparacao;
# 10 - mostrarPontuacao;

# # # # Fun√ß√µes # # # #

#passar as variaveis globais como parametro

#----- 1¬™ fun√ß√£o -----#

# Anderson lima
'''' SUGESTAO : remover as variaveis globais, ao inves disso passar a necessidade de criar os tabuleiros ocultos e nao ocultos para a fun√ßao
criar tabuleiro, que vai ficar dependente do nome dos jogadores e da ordem ja definida'''
# Configura√ß√£o inicial do jogo




def configurarJogo():
    # Definir as vari√°veis importantes como globais
    global ordem, nomeJogador1, nomeJogador2, quantidadeDeNavios, tabuleiroJogador1, tabOculto1, pontuacaoDoJogador1,tabuleiroJogador2, pontuacaoDoJogador2, tabOculto2

    ordem = 8
    pontuacaoDoJogador1 = pontuacaoDoJogador2 = 0

    # O programa ser√° iniciado e mostrado na tela a partir deste ponto // apenas a primeira impressao
    
    # Pede-se o nome de cada jogador

    
  
        

    # Escolher a quantidade de navios que cada jogador possuir√°, enquanto a fun√ßao √© executada
    while True:
        quantidadeDeNavios = int(input('üö¢ N√∫mero de navios de cada jogador üö¢ [m√°ximo = 6]: '))
        if quantidadeDeNavios <= 6 and quantidadeDeNavios >= 1:
            break
        sleep(0.5)
        tabuleiroJogador1 = criarTabuleiro(quantidadeDeNavios)

    

    # Tabuleiros que mostram as frota, vamos chamar a fun√ß√£o criarTabuleiro, apos receber o numero de navios como parametro
    
        

         

    # Vamos definir se os usu√°rios querem que mostre a frota de navio no tabuleiro ou n√£o durante o jogo
    # Anderson lima : transformar (mostratabuleiro em uma fun√ßao dependente da 2 fun√ß√£o)
      

   
    # Como temos uma fun√ß√£o para imprimir todas as matrizes em todas as possibilidades, passamos par√¢metros do tipo "None", pois n√£o ser√° usados nessa declara√ß√£o. Por√©m, n√£o podemos ocultar os 3 √∫ltimos, tendo em vista que mesmo essa fun√ß√£o recebe 5 par√¢metros formais, usados por outras fun√ß√µes;

    

#----- 2¬™ fun√ß√£o -----#

# 
# Fun√ß√£o da cria√ß√£o do tabuleiro com espa√ßos vazios e navios
def criarTabuleiro(quantidadeDeNavios):  
    tabuleiro = [['-']*ordem for i in range(ordem)]
    
    cont = 0

    # Impede que os navios encostem uns nos outros, verificando de h√° navios adjacentes
    # logo, contador s√≥ recebe mais naviis ao passar pelas condicionais
    while cont < quantidadeDeNavios:
        linha = randint(0, ordem - 1)
        coluna = randint(0, ordem - 1)
        if linha > 0 and coluna > 0 and tabuleiro[linha-1][coluna-1] == 'N':
            continue #faz o loop voltar para o in√≠cio identado.
        if linha > 0 and tabuleiro[linha-1][coluna] == 'N': #verifica√ß√£o para o N adjascente acima
            continue
        if linha > 0 and coluna < (ordem - 1) and tabuleiro[linha-1][coluna+1] == 'N': #verifica√ß√£o para o N diagonal superior direita 
            continue
        if coluna > 0 and tabuleiro[linha][coluna-1] == 'N': #verifica√ß√£o para o N adjascente ao lado esquerdo
            continue
        if tabuleiro[linha][coluna] == 'N': #verifica√ß√£o para o N na mesma coordenada 
            continue
        if coluna < (ordem - 1) and tabuleiro[linha][coluna+1] == 'N': #verifica√ß√£o para o N adjascente ao lado direito
            continue
        if linha < (ordem - 1) and coluna > 0 and tabuleiro[linha+1][coluna-1] == 'N': #verifica√ß√£o para o N diagonal inferior esquerda
            continue
        if linha < (ordem - 1) and tabuleiro[linha+1][coluna] == 'N': #verifica√ß√£o para o N adjascente abaixo
            continue
        if linha < (ordem - 1) and coluna < (ordem - 1) and tabuleiro[linha+1][coluna+1] == 'N': #verifica√ß√£o para o N diagonal inferior direita 
            continue
        tabuleiro[linha][coluna] = 'N'
        cont += 1
        
    print(tabuleiro)

imprimir = criarTabuleiro(6)
variavel = configurarJogo()